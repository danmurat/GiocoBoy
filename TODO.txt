NOTES FOR NEXT PICKUP: Tuesday night

there is an issue at pc: 0xc186

pop hl is called, h must become: c1 
                  l must become: b1

However, we are getting l as b2.

our _pop was changed at somepoint because a register was 1 int behind what it should've
been. Therefore we made a change to our _pop:

def _pop(self, reg1, reg2):
    self.registers[reg1] = self.m.read_byte(self.SP + 1)
    self.registers[reg2] = self.m.read_byte(self.SP) + 1 # Where we add a one here
    self.SP += 2
    self.PC += 1

Apparantly this is incorrect and there should be no + 1 there.

At this moment, I would remove the + 1, then check the last 0xE1 (POP HL) instruction
call and check for other reasons/fixes to why we are getting the register value 1
less than what it should be. 



INTERRUPTS:

1. Implement the Interrupt Vectors: When an interrupt is triggered, the CPU jumps to a 
   specific address in memory called the interrupt vector. The Game Boy has five interrupt 
   vectors for the corresponding interrupts:
    - V-Blank: 0x0040
    - LCD STAT: 0x0048
    - Timer: 0x0050
    - Serial: 0x0058
    - Joypad: 0x0060

2. Check for pending interrupts: In your emulator's main loop, where the CPU executes 
   instructions, you should also check for pending interrupts. If the IME flag is set and 
   a pending interrupt is enabled, handle the interrupt.

3. Handle the interrupt: When an interrupt is triggered, you should:
    - Disable the IME flag.
    - Push the current PC onto the stack.
    - Jump to the corresponding interrupt vector.

4. Update the IF register: Whenever an interrupt is requested, you should set the 
   corresponding bit in the IF register. You should also clear the bit when the 
   interrupt is acknowledged.

5. Implement the RST instruction: The Game Boy uses the RST instruction to jump to the 
   interrupt vector. You should implement this instruction in your CPU opcode set.

